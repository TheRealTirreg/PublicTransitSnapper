"""
Copyright 2022
Bachelor's thesis by Gerrit Freiwald and Robin Wu
"""
import json
import networkx as nx
from typing import Tuple
from datetime import datetime
from shapely.geometry import LineString
from shapely.strtree import STRtree
from TripsWithStops import TripWithStopsAndTimes
import Utilities as Utils


def read_json(filename) -> dict:
    """
    Reads a json file and returns it as a dict
    """
    print(f"Reading {filename}...", flush=True)
    with open(filename) as f:
        return json.load(f)


def list_dict_to_tuple_dict(dct: dict) -> dict:
    """
    Takes a dict like {key: [...]} and returns {key: (...)}
    >>> list_dict_to_tuple_dict({})
    {}
    >>> list_dict_to_tuple_dict({"some_key": [1, 2, 3]})
    {'some_key': (1, 2, 3)}
    """
    return {key: tuple(val) for key, val in dct.items()}


def list_dict_to_tuple_dict_deeper(dct: dict) -> dict:
    """
    Takes a dict like {key: [[], [], ...]} and returns {key: [(), (), ...]}
    >>> lat = 48.123456
    >>> lon = 7.123456
    >>> list_dict_to_tuple_dict_deeper({"key": [[lat, lon], [lat, lon], [lat, lon]]})
    {'key': [(48.123456, 7.123456), (48.123456, 7.123456), (48.123456, 7.123456)]}
    """
    ret_dct = {}

    for key, val in dct.items():
        lst = []
        for element in val:  # val is a list
            lst.append(tuple(element))  # convert list to tuple
        ret_dct[key] = lst

    return ret_dct


def generate_service_id_to_service_information(service_id_to_service_information_file) -> dict:
    """
    Reads a .json file generated by a c++ script.
    Returns a dict:
            {"service_id" : (active_weekdays, start_date end_date, extra_dates, removed_dates)}
    File looks like:
    {   "service_id": [
                        [active_weekdays],
                        start_date, end_date,
                        [extra_dates],
                        [removed_dates]
                    ]}
    """
    dct = read_json(service_id_to_service_information_file)

    ret_dct = {}
    for key, val in dct.items():
        ret_dct[key] = (val[0], datetime.strptime(val[1], "%Y%m%d").date(), datetime.strptime(val[2], "%Y%m%d").date(),
                        set(datetime.strptime(date_str, "%Y%m%d").date() for date_str in val[3]),
                        set(datetime.strptime(date_str, "%Y%m%d").date() for date_str in val[4]))

    return ret_dct


def generate_hash_to_edge_id_to_trip_segment_id_dict_dict(
        map_hash_to_edge_id_to_trip_segment_id_file, line_string=True) -> dict:
    """
    Reads a .json file generated by a c++ script.
    Returns a dict {hash: (dict{edge_id: [trip_segments]}, [LineString]) }
    File looks like:
    [
        [    <= only includes one hash and one dict
        91363862467418791,   <= hash
        [{                    <= dict
            "1416": [        <= edge_id which should be an int
                3,           <= trip_segments
                4
            ],
            "1417": [
                4
            ],
        },[
            [[tripsegment0_polyline], [tripsegment1_polyline], ...] <= trip segments in polyline format
        ]
        ]
    ]
    """
    lst = read_json(map_hash_to_edge_id_to_trip_segment_id_file)

    ret_dct = {}
    for hash_value, (map_edges_ts_id, ts_polyline) in lst:
        edge_id_to_trip_segments_dict = {}
        for key, val in map_edges_ts_id.items():
            # the edge_id is a string, but needs to be converted to an int
            edge_id_to_trip_segments_dict[int(key)] = val

        polyline_of_trip_segments = []
        if line_string:
            for polyline in ts_polyline:
                polyline_of_trip_segments.append(LineString(polyline))
        else:
            for polyline in ts_polyline:
                points_tuple = []
                for point in polyline:
                    points_tuple.append(tuple(point))
                polyline_of_trip_segments.append(points_tuple)

        ret_dct[hash_value] = edge_id_to_trip_segments_dict, polyline_of_trip_segments

    return ret_dct


def generate_trip_id_to_trips_with_stops_dict(
        trips_with_stops_json_file,
        trip_id_to_route_id_and_list_of_stop_times_and_stop_id_dict,
        service_id_to_service_information_dict):
    """
    Reads a .json file generated by a c++ script.
    Returns a dict {"trip_id": TripsWithStopsAndTimes}
    File looks like:
    {
        "trip_id": [
            {map_id_to_trip_segments}, "service_id"
        ]
    }
    """
    dct = read_json(trips_with_stops_json_file)

    trip_id_to_trips_with_stops_and_times_dict = {}

    for i, items in enumerate(dct.items()):
        key, val = items
        trip_id = key
        map_id_to_trip_segments, service_id = val

        start_time, start_overtime = trip_id_to_route_id_and_list_of_stop_times_and_stop_id_dict[trip_id][1][0][0]
        end_time, end_overtime = trip_id_to_route_id_and_list_of_stop_times_and_stop_id_dict[trip_id][1][-1][1]

        active_weekdays = service_id_to_service_information_dict[service_id][0]

        trip_id_to_trips_with_stops_and_times_dict[trip_id] = TripWithStopsAndTimes(
            trip_id=trip_id,
            hash_to_edge_id_to_trip_segments_dict=map_id_to_trip_segments,
            service_id=service_id,
            active_weekdays=active_weekdays,
            start_time=start_time,
            start_overtime=start_overtime,
            end_time=end_time,
            end_overtime=end_overtime
        )

    return trip_id_to_trips_with_stops_and_times_dict


def generate_trip_id_to_route_id_and_list_of_stop_times_and_stop_id_dict(
        trip_id_to_route_id_and_list_of_stop_times_and_stop_id_json_file) -> dict:
    """
    Reads a .json file generated by a c++ script.
    Returns a dict {"trip_id": ("route_id", [((arrival_time, arrival_overtime),
                                              (departure_time, departure_overtime),
                                              stop_id),
                                             ...])}
    File looks like:
    {
        "1.T0.10-46-I-j22-1.2.H": [   <= should be a tuple
            "route_id",
            [
                [
                    [
                        "04:40:00",
                        false
                    ],
                    [                               first stop
                        "04:40:00",
                        false            <= overtime on departure time
                    ],
                    "de:08311:6508:3:14"
                ],
                [
                    [
                        "04:49:00",
                        false
                    ],
                    [                               second stop
                        "04:49:00",
                        false
                    ],
                    "de:08315:30923:0:1"
                ],
                ...                                 ...
            ]
        ]   <= should be the end of a tuple
    }
    """
    dct = read_json(trip_id_to_route_id_and_list_of_stop_times_and_stop_id_json_file)

    ret_dct = {}

    for i, items in enumerate(dct.items()):
        trip_id = items[0]
        route_id = items[1][0]
        lst = []
        for stop in items[1][1]:
            start = (datetime.strptime(stop[0][0], "%H:%M:%S"), stop[0][1])
            end = (datetime.strptime(stop[1][0], "%H:%M:%S"), stop[1][1])
            stop_id = stop[2]
            lst.append((start, end, stop_id))
        ret_dct[trip_id] = (route_id, lst)

    return ret_dct


def generate_graph_and_geo_index(edges_file: str) -> Tuple[nx.DiGraph, STRtree]:
    """
    Reads a json file. it looks like:
    [
        [
            [
                48.015453339,
                7.8547878265,     <= edge as four floats ((lat1, lon1), (lat2, lon2))
                48.012546539,
                7.8545103073
            ],
            323.8799339266617,    <= length of edge
            [
                [                 <= contains all the shapes that the edge is on
                    "shp_0_1",    <= shape_id
                    1             <= sequence_id
                ],
                ...
            ]
        ],
        ...
    ]
    """
    # debug
    print("Generating GTFS graph...", flush=True)

    lst = read_json(edges_file)

    # generate graph and add every edge to the graph
    graph = nx.DiGraph()
    edges_as_tuples = []
    num_edges = len(lst)
    num_trips_modulo = num_edges // 5
    for i, edge in enumerate(lst):
        edge_tup = ((edge[0][0], edge[0][1]), (edge[0][2], edge[0][3]))  # ((lat1, lon1), (lat2, lon2))
        edges_as_tuples.append(LineString(edge_tup))

        # convert shape from list of lists to list of tuples (see docstring)
        shape = [tuple(sublist) for sublist in edge[2]]

        # start, end, length, shapes, edge_id
        graph.add_edge(edge_tup[0], edge_tup[1], length=edge[1], shape=shape, edge_id=i)

        # debug:
        if not i % num_trips_modulo:
            print(f"{round(i / num_edges * 100, 2)}%\tof  generating GTFS graph", flush=True)

    # debug
    print("Finished generating GTFS graph...", flush=True)
    print("Generating STRtree...", flush=True)

    strtree = STRtree(edges_as_tuples)

    # debug
    print("Finished generating STRtree.", flush=True)

    return graph, strtree


def generate_route_id_to_route_information_dict(route_id_to_route_information_file: str) -> dict:
    """
    Returns a dict that looks like:
    {
        "route_id": (  <= tuples are represented as lists in json
            "10",                                              <= route_short_name
            "3",                                               <= route_type
            "646363",                                          <= route_color
            "ffffff"                                           <= route_text_color
        ),
        "another_route_id": (
            "11",
            "3",
            "646363",
            "ffffff"
        ),
        ...
    }
    """
    jsn = read_json(route_id_to_route_information_file)
    dct = {}

    # {key: tuple(val) for key, val in dct.items()}

    for key, val in jsn.items():
        color, text_color = Utils.get_colors(color=val[2], text_color=val[3], route_type=int(val[1]))
        dct[key] = (val[0], val[1], color, text_color)

    return dct


def generate_shape_id_to_trip_service_route_ids_dict(shape_id_to_trip_service_route_ids_file) -> dict:
    """
    Returns a dict that looks like: {"shape_id": [
            (first edge of shape),
            (trip_id, service_id, route_id),
            another (trip_id, service_id, route_id),
            ...
        ]}
    Reads a json file. it looks like:
    {
        "shp_0_1": [
            [                 <= the first entry of every shape value is always
                48.008796692,                        the first edge of the shape
                7.8488759995,                        (lat_1, lon_1, lat_2, lon_2)
                48.008666992,
                7.8491206169
            ],
            [                  <= should be a tuple, but is a list in the json file.
                "1821.T0.11-2-I-j22-1.17.R",   <= trip_id for every trip on this shape
                "T0+3s",                       <= service_id
                "11-2-I-j22-1"                 <= route_id
            ],
            [                  <= should be a tuple, but is a list in the json file.
                "121.T0.11-2-I-j22-1.17.R",    <= trip_id for another trip on this shape
                "T0+3s",                       <= service_id
                "11-2-I-j22-1"                 <= route_id
            ],
            ...
        ],
        ...
    }
    """
    return list_dict_to_tuple_dict_deeper(read_json(shape_id_to_trip_service_route_ids_file))


def generate_stop_id_to_stop_information_dict(stop_id_to_stop_information_file) -> dict:
    """
    Returns a dict that looks like: {"stop_id" : (stop_name, stop_lat, stop_lon)}
    Reads a json file. it looks like:
    {
        "Parentde:0815:54": [         <= should be a tuple, but is a list in the json file
            "Ihringen Winzerstube",
            48.042438507,
            7.6510410309
        ],
        "de:08311:30400:0:2": [       <= stop_id
            "Freiburg, Dorfstraße",   <= stop_name
            47.96501922600001,        <= lat
            7.8573932648              <= lon
        ],
        ...
    }
    """
    return list_dict_to_tuple_dict(read_json(stop_id_to_stop_information_file))


def generate_stop_id_to_trips_with_departure_time_dict(stop_id_to_trips_with_departure_time_file) -> dict:
    """
    Returns a dict that looks like: {"stop_id" : [(trip_id, departure_time)]}
    Reads a json file. it looks like:
    {
        "de:08311:30312:0:1": [   <= stop_id
        [      <= should be a tuple, but is a list in the json file
            "618.T3.10-17-I-j22-1.16.H",   <= trip_id
            "06:41:00"                     <= departure_time
        ],
        [
            "629.T3.10-17-I-j22-1.16.H",
            "07:11:00"
        ],
        ...
    }
    """
    return list_dict_to_tuple_dict_deeper(read_json(stop_id_to_trips_with_departure_time_file))


def generate_stop_name_to_list_of_stop_ids_dict(stop_name_to_list_of_stop_ids_file) -> dict:
    """
    Returns a dict that looks like: {"stop_name" : [stop_id]}
    Reads a json file. it looks like:
    {
        "Beim Oberen Bäumle": [
            "de:08315:5221:0:1",
            "de:08315:5221:0:2",
            "Parentde:08315:5221"
        ],
        "Breisach, Bahnhof": [     <= stop_name
            "de:08315:6504:3:10",
            "de:08315:6504:3:6",   <= all the stop_ids that have the same stop_name
        ],
        ...
    }
    """
    return read_json(stop_name_to_list_of_stop_ids_file)
